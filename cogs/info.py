from nextcord import colour
from utils.languageembed import languageEmbed
import settings
import nextcord
import json
import aiohttp
import datetime
from bs4 import BeautifulSoup
import requests
import humanize
from nextcord.ext import commands
from googleapiclient.discovery import build


class Info(commands.Cog):
    def __init__(self, bot: commands.AutoShardedBot):
        self.bot = bot

    @commands.command(aliases=["bitcoin"])
    async def btc(self, ctx):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD,EUR,THB"
                ) as r:
                    r = await r.json()
                    usd = r["USD"]
                    eur = r["EUR"]
                    thb = r["THB"]
                    embed = nextcord.Embed(
                        colour=0xFFFF00,
                        title="Bitcoin",
                        description=f"USD: `{str(usd)}$`\nEUR: `{str(eur)}‚Ç¨`\nTHB: `{str(thb)}‡∏ø`",
                    )
                    embed.set_author(
                        name="Bitcoin", icon_url="https://i.imgur.com/3gVaQ4z.png"
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                    embed.timestamp = datetime.datetime.utcnow()

                    await ctx.send(embed=embed)

    @commands.command(aliases=["ethereum"])
    async def eth(self, ctx: commands.Context):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD,EUR,THB"
                ) as r:
                    r = await r.json()
                    usd = r["USD"]
                    eur = r["EUR"]
                    thb = r["THB"]
                    embed = nextcord.Embed(
                        colour=0xFFFF00,
                        title="Ethereum",
                        description=f"USD: `{str(usd)}$`\nEUR: `{str(eur)}‚Ç¨`\nTHB: `{str(thb)}‡∏ø`",
                    )
                    embed.set_author(
                        name="Ethereum", icon_url="https://i.imgur.com/vsWBny2.png"
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                    embed.timestamp = datetime.datetime.utcnow()

                    await ctx.send(embed=embed)

    @commands.command()
    async def github(self, ctx: commands.Context, *, user=None):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                url = f"https://api.github.com/users/{user}"
                if user is None:
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏áGithub‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π ``{settings.COMMAND_PREFIX}github (user)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as r:
                        r = await r.json()

                    if not r["message"] == "Not Found":
                        username = r["login"]
                        avatar = r["avatar_url"]
                        githuburl = r["html_url"]
                        name = r["name"]
                        location = r["location"]
                        email = r["email"]
                        company = r["company"]
                        bio = r["bio"]
                        repo = r["public_repos"]

                        embed = nextcord.Embed(
                            colour=0x00FFFF,
                            title=f"üíª ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Github ‡∏Ç‡∏≠‡∏á {username}",
                            description=f"""```
‡∏ä‡∏∑‡πà‡∏≠ Github : {username}
‡∏•‡∏¥‡∏á‡∏Ñ‡πå Github : {githuburl}
‡∏ä‡∏∑‡πà‡∏≠ : {name}
‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà : {location}
‡∏≠‡∏µ‡πÄ‡∏°‡∏• : {email}
‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó : {company}
Bio : {bio}
‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á : {repo}```""",
                        )
                        embed.set_thumbnail(url=avatar)
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                        message = await ctx.send(embed=embed)

                        await message.add_reaction("üíª")

                    else:
                        embed = nextcord.Embed(
                            colour=0x983925,
                            description=f" ‚ö†Ô∏è‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏áGithub‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏±‡∏ß‡∏™‡∏∞‡∏Å‡∏î",
                        )
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                url = f"https://api.github.com/users/{user}"
                if user is None:
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` need to specify a github username to search ``{settings.COMMAND_PREFIX}github (user)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as r:
                        r = await r.json()

                    if not r["message"] == "Not Found":
                        username = r["login"]
                        avatar = r["avatar_url"]
                        githuburl = r["html_url"]
                        name = r["name"]
                        location = r["location"]
                        email = r["email"]
                        company = r["company"]
                        bio = r["bio"]
                        repo = r["public_repos"]

                        embed = nextcord.Embed(
                            colour=0x00FFFF,
                            title=f"üíª ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Github ‡∏Ç‡∏≠‡∏á {username}",
                            description=f"""```
Github username: {username}
Github link : {githuburl}
Name : {name}
Location : {location}
Email : {email}
Company : {company}
Bio : {bio}
Repository : {repo}```""",
                        )
                        embed.set_thumbnail(url=avatar)
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                        message = await ctx.send(embed=embed)

                        await message.add_reaction("üíª")

                    else:
                        embed = nextcord.Embed(
                            colour=0x983925,
                            description=f" ‚ö†Ô∏èUnable to find the github profile please check your spelling",
                        )
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚ö†Ô∏è")

    @github.error
    async def github_error(self, ctx: commands.Context, error):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ``{settings.COMMAND_PREFIX}github (username)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` need to specify a username to search ``{settings.COMMAND_PREFIX}github (username)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

    @commands.command(aliases=["cv19th", "covidthai", "covid19thai"])
    async def covid19th(self, ctx: commands.Context):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://covid19.th-stat.com/json/covid19v2/getTodayCases.json"
                ) as r:
                    r = await r.json()
                    newconfirm = r["NewConfirmed"]
                    newdeath = r["NewDeaths"]
                    recover = r["Recovered"]
                    death = r["Deaths"]
                    source = "https://covid19.th-stat.com/th"
                    update = r["UpdateDate"]
                    confirm = r["Confirmed"]
                    hospital = r["Hospitalized"]
                    hospitalnew = r["NewHospitalized"]

                    newconfirm = humanize.intcomma(newconfirm)
                    newdeath = humanize.intcomma(newdeath)
                    recover = humanize.intcomma(recover)
                    death = humanize.intcomma(death)
                    recover = humanize.intcomma(recover)
                    confirm = humanize.intcomma(confirm)
                    hospital = humanize.intcomma(hospital)
                    hospitalnew = humanize.intcomma(hospitalnew)

                    if server_language == "Thai":

                        embed = nextcord.Embed(
                            title="üíä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• COVID-19 ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
                            description=f"‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏•‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ {update}",
                            color=0x00FFFF,
                        )

                        embed.add_field(name="ü§í ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡∏∞‡∏™‡∏°", value=f"{confirm} ‡∏Ñ‡∏ô")
                        embed.add_field(
                            name="üò∑ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", value=f"{newconfirm} ‡∏Ñ‡∏ô"
                        )
                        embed.add_field(
                            name="üè† ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß", value=f"{recover} ‡∏Ñ‡∏ô"
                        )
                        embed.add_field(
                            name="üè† ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                            value=f"{hospital} ‡∏Ñ‡∏ô",
                        )
                        embed.add_field(
                            name="üè† ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏´‡∏°‡πà",
                            value=f"{hospitalnew} ‡∏Ñ‡∏ô",
                        )
                        embed.add_field(
                            name="‚ò†Ô∏è ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{death} ‡∏Ñ‡∏ô"
                        )
                        embed.add_field(
                            name="‚ò†Ô∏è ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà", value=f"{newdeath} ‡∏Ñ‡∏ô"
                        )
                        embed.set_footer(text=f"""‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {source}""")

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("üíä")

                    if server_language == "English":

                        embed = nextcord.Embed(
                            title="üíä Thailand COVID-19 status",
                            description=f"lastest update: {update}",
                            color=0x00FFFF,
                        )

                        embed.add_field(
                            name="ü§í Total confirm cases", value=f"{confirm} ‡∏Ñ‡∏ô"
                        )
                        embed.add_field(name="üò∑ New cases", value=f"{newconfirm} ‡∏Ñ‡∏ô")
                        embed.add_field(
                            name="üè† Total recover patients", value=f"{recover} ‡∏Ñ‡∏ô"
                        )
                        embed.add_field(
                            name="üè† Total hospitalize", value=f"{hospital} ‡∏Ñ‡∏ô"
                        )
                        embed.add_field(
                            name="üè† New hospitalize", value=f"{hospitalnew} ‡∏Ñ‡∏ô"
                        )
                        embed.add_field(name="‚ò†Ô∏è Total death", value=f"{death} ‡∏Ñ‡∏ô")
                        embed.add_field(name="‚ò†Ô∏è New death", value=f"{newdeath} ‡∏Ñ‡∏ô")
                        embed.set_footer(text=f"""Source : {source}""")

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("üíä")

    @commands.command(aliases=["covid", "corona", "cv19"])
    async def covid19(self, ctx: commands.Context):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            async with aiohttp.ClientSession() as session:
                async with session.get("https://disease.sh/v3/covid-19/all") as r:
                    r = await r.json()

                    case = r["cases"]
                    todaycase = r["todayCases"]
                    totaldeath = r["deaths"]
                    todaydeath = r["todayDeaths"]
                    recover = r["recovered"]
                    todayRecover = r["todayRecovered"]
                    activecase = r["active"]

                    case = humanize.intcomma(case)
                    todaycase = humanize.intcomma(todaycase)
                    totaldeath = humanize.intcomma(totaldeath)
                    todaydeath = humanize.intcomma(todaydeath)
                    recover = humanize.intcomma(recover)
                    todayRecover = humanize.intcomma(todayRecover)
                    activecase = humanize.intcomma(activecase)

            if server_language == "Thai":
                embed = nextcord.Embed(
                    colour=0x00FFFF,
                    title="üíä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ß‡∏£‡∏±‡∏™‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î-19 ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å",
                    description="‡πÄ‡πÄ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤ : https://disease.sh/v3/covid-19/all",
                )
                embed.set_thumbnail(url="https://i.imgur.com/kmabvi8.png")

                embed.add_field(name="üìä ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡πÄ‡∏•‡πâ‡∏ß : ", value=f"{case}")
                embed.add_field(name="üíÄ ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß : ", value=f"{totaldeath}")
                embed.add_field(name="‚úÖ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß : ", value=f"{recover}")
                embed.add_field(name="üìà ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ : ", value=f"{case}")
                embed.add_field(name="üíÄ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ : ", value=f"{todaydeath}")
                embed.add_field(name="‚úÖ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏´‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ : ", value=f"{todayRecover}")
                embed.add_field(name="‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ : ", value=f"{activecase}")

                embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                message = await ctx.send(embed=embed)
                await message.add_reaction("üíä")

            if server_language == "English":
                embed = nextcord.Embed(
                    colour=0x00FFFF,
                    title="üíäCovid-19 around the world",
                    description="Source : https://disease.sh/v3/covid-19/all",
                )
                embed.set_thumbnail(url="https://i.imgur.com/kmabvi8.png")

                embed.add_field(name="üìä Total confirm cases : ", value=f"{case}")
                embed.add_field(name="üíÄ Total death : ", value=f"{totaldeath}")
                embed.add_field(name="‚úÖ Total recover patients : ", value=f"{recover}")
                embed.add_field(
                    name="üìà Total confirm cases today : ", value=f"{todaycase}"
                )
                embed.add_field(name="üíÄ New death : ", value=f"{todaydeath}")
                embed.add_field(
                    name="‚úÖ Today recover patients : ", value=f"{todayRecover}"
                )
                embed.add_field(name="‚ö†Ô∏è Active cases : ", value=f"{activecase}")

                embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                message = await ctx.send(embed=embed)
                await message.add_reaction("üíä")

    @commands.command()
    async def geoip(self, ctx: commands.Context, *, ip):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            ip = str(ip)
            async with aiohttp.ClientSession() as session:
                async with session.get(f"http://extreme-ip-lookup.com/json/{ip}") as r:
                    r = await r.json()

            if server_language == "Thai":
                if r["status"] == "success":
                    embed = nextcord.Embed(
                        colour=0xFED000,
                        title=f":satellite_orbital: „Éª…¢·¥á·¥è  ü·¥è·¥Ñ·¥Ä·¥õ…™·¥è…¥ ‚Ü∑",
                        description=f"""
```xl
‚Ä¢ ùó•ùóòùó¶ùó®ùóüùóßùó¶ ‚Ü∑
  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á IP : {r["ipType"]}
  ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® : {r["country"]}
  ‡πÇ‡∏Ñ‡πâ‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® : {r["countryCode"]}
  ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î : {r["city"]}
  ‡∏ó‡∏ß‡∏µ‡∏õ : {r["continent"]}
  ‡∏Ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ô‡πá‡∏ó : {r["isp"]}
  ‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ : {r["region"]}
  ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ : {r["org"]}
  ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó : {r["businessName"]}
  ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó : {r["businessWebsite"]}
  Logitude : {r["lon"]}
  Latitude : {r["lat"]}
``````xl
‚Ä¢ IP ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ : {r['query']}```
                    """,
                    )
                    embed.add_field(
                        name=":file_cabinet: ·¥Ä·¥ò…™ Íú±·¥õ·¥Ä·¥õ·¥úÍú±",
                        value=f"[Íú±·¥õ·¥Ä·¥õ·¥úÍú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±](http://extreme-ip-lookup.com/json/{ip})",
                    )
                    embed.add_field(
                        name=":desktop: ·¥Ä·¥ò…™ ·¥úÍú±·¥á·¥Ö",
                        value=f"[·¥áx·¥õ Ä·¥á·¥ç·¥á-…™·¥ò](http://extreme-ip-lookup.com/json/)",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("üíª")

                else:
                    embed = nextcord.Embed(
                        colour=0x983925,
                        title=f"‡πÑ‡∏°‡πà‡∏û‡∏ö IP",
                        description=f"""
```xl                        
‚Ä¢ IP ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ : {ip}```""",
                    )

            if server_language == "English":
                if r["status"] == "success":
                    embed = nextcord.Embed(
                        colour=0x00FFFF,
                        title=f":satellite_orbital: „Éª…¢·¥á·¥è  ü·¥è·¥Ñ·¥Ä·¥õ…™·¥è…¥ ‚Ü∑",
                        description=f"""
```xl
‚Ä¢ ùó•ùóòùó¶ùó®ùóüùóßùó¶ ‚Ü∑
  type of IP : {r["ipType"]}
  country : {r["country"]}
  country code : {r["countryCode"]}
  city : {r["city"]}
  continent : {r["continent"]}
  ISP : {r["isp"]}
  region : {r["region"]}
  organization : {r["org"]}
  business name : {r["businessName"]}
  business website : {r["businessWebsite"]}
  Logitude : {r["lon"]}
  Latitude : {r["lat"]}
``````xl
‚Ä¢ IP search : {r['query']}```
                    """,
                    )
                    embed.add_field(
                        name=":file_cabinet: ·¥Ä·¥ò…™ Íú±·¥õ·¥Ä·¥õ·¥úÍú±",
                        value=f"[Íú±·¥õ·¥Ä·¥õ·¥úÍú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±](http://extreme-ip-lookup.com/json/{ip})",
                    )
                    embed.add_field(
                        name=":desktop: ·¥Ä·¥ò…™ ·¥úÍú±·¥á·¥Ö",
                        value=f"[·¥áx·¥õ Ä·¥á·¥ç·¥á-…™·¥ò](http://extreme-ip-lookup.com/json/)",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("üíª")
                else:
                    embed = nextcord.Embed(
                        colour=0x983925,
                        title=f"IP not found",
                        description=f"""
```xl                        
‚Ä¢ IP search : {ip}```""",
                    )

    @geoip.error
    async def geoip_error(self, ctx: commands.Context, error):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ IP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ``{settings.COMMAND_PREFIX}geoip (IP)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` need to specify an IP to search for ``{settings.COMMAND_PREFIX}geoip (IP)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

    @commands.command()
    async def youtube(self, ctx: commands.Context, *, keywords):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]
            apikey = settings.youtubeapi
            youtube = build("youtube", "v3", developerKey=apikey)

            snippet = (
                youtube.search()
                .list(part="snippet", q=keywords, type="video", maxResults=50)
                .execute()
            )
            req = snippet["items"][0]

            video_title = req["snippet"]["title"]
            video_id = req["id"]["videoId"]
            thumbnail = req["snippet"]["thumbnails"]["high"]["url"]
            channel_title = req["snippet"]["channelTitle"]
            description = req["snippet"]["description"]

            clip_url = "http://www.youtube.com/watch?v=" + video_id

            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://www.googleapis.com/youtube/v3/videos?part=statistics&id={video_id}&key={apikey}"
                ) as r:
                    r = await r.json()

            stat = r["items"][0]
            view = stat["statistics"]["viewCount"]
            like = stat["statistics"]["likeCount"]
            dislike = stat["statistics"]["dislikeCount"]
            comment = stat["statistics"]["dislikeCount"]

            view = humanize.intcomma(int(view))
            like = humanize.intcomma(int(like))
            dislike = humanize.intcomma(int(dislike))
            comment = humanize.intcomma(int(comment))

            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://www.googleapis.com/youtube/v3/videos?part=contentDetails&id={video_id}&key={apikey}"
                ) as r:
                    re = await r.json()

            items = re["items"][0]
            Age_restriction = False
            rating = items["contentDetails"]["contentRating"]
            if "ytrating" in rating and rating["ytRating"] == "ytAgeRestricted":
                Age_restriction = True

            if server_language == "Thai":
                if Age_restriction is True:
                    if ctx.channel.is_nsfw():
                        embed = nextcord.Embed(
                            title=video_title,
                            colour=0x00FFFF,
                            description=f"[‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ]({clip_url})",
                        )
                        embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á", value=f"{channel_title}")
                        embed.add_field(name="‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{view}")
                        embed.add_field(name="‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{comment}")
                        embed.add_field(name="‡πÑ‡∏•‡∏Ñ‡πå", value=f"{like}")
                        embed.add_field(name="‡∏î‡∏¥‡∏™‡πÑ‡∏•‡∏Ñ‡πå", value=f"{dislike}")
                        embed.add_field(name="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", value=f"{description}")

                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                        embed.set_image(url=thumbnail)
                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚úÖ")

                    else:
                        embed = nextcord.Embed(
                            colour=0x983925,
                            title=f"NSFW",
                            description=f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ 18+ ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡πÄ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á NSFW ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                        )

                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                        embed.timestamp = datetime.datetime.utcnow()

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚ú®")

                else:
                    embed = nextcord.Embed(
                        title=video_title,
                        colour=0x00FFFF,
                        description=f"[‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ]({clip_url})",
                    )
                    embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á", value=f"{channel_title}")
                    embed.add_field(name="‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{view}")
                    embed.add_field(name="‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{comment}")
                    embed.add_field(name="‡πÑ‡∏•‡∏Ñ‡πå", value=f"{like}")
                    embed.add_field(name="‡∏î‡∏¥‡∏™‡πÑ‡∏•‡∏Ñ‡πå", value=f"{dislike}")
                    embed.add_field(name="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", value=f"{description}")

                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                    embed.set_image(url=thumbnail)
                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚úÖ")

            if server_language == "English":
                if Age_restriction is True:
                    if ctx.channel.is_nsfw():
                        embed = nextcord.Embed(
                            title=video_title,
                            colour=0x00FFFF,
                            description=f"[click here]({clip_url})",
                        )
                        embed.add_field(name="Channel", value=f"{channel_title}")
                        embed.add_field(name="View", value=f"{view}")
                        embed.add_field(name="Comment", value=f"{comment}")
                        embed.add_field(name="Like", value=f"{like}")
                        embed.add_field(name="Dislike", value=f"{dislike}")
                        embed.add_field(name="Description", value=f"{description}")

                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                        embed.set_image(url=thumbnail)
                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚úÖ")

                    else:
                        embed = nextcord.Embed(
                            colour=0x983925,
                            title=f"NSFW",
                            description=f"you are not allow to search for 18+ content in this text channel please use this in NSFW channel",
                        )
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                        embed.timestamp = datetime.datetime.utcnow()

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚ú®")

                else:
                    embed = nextcord.Embed(
                        title=video_title,
                        colour=0x00FFFF,
                        description=f"[click here]({clip_url})",
                    )
                    embed.add_field(name="Channel", value=f"{channel_title}")
                    embed.add_field(name="View", value=f"{view}")
                    embed.add_field(name="Comment", value=f"{comment}")
                    embed.add_field(name="Like", value=f"{like}")
                    embed.add_field(name="Dislike", value=f"{dislike}")
                    embed.add_field(name="Description", value=f"{description}")

                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                    embed.set_image(url=thumbnail)
                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚úÖ")

    @youtube.error
    async def youtube_error(self, ctx: commands.Context, error):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ``{settings.COMMAND_PREFIX}youtube [‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏õ]``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` need to specify what video to search on Youtube ``{settings.COMMAND_PREFIX}youtube [video name]``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

    @commands.command()
    async def ytsearch(self, ctx: commands.Context, *, keywords):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]
            apikey = settings.youtubeapi
            youtube = build("youtube", "v3", developerKey=apikey)
            snippet = (
                youtube.search()
                .list(part="snippet", q=keywords, type="video", maxResults=50)
                .execute()
            )
            i = 1
            if server_language == "Thai":
                embed = nextcord.Embed(
                    title="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å YouTube",
                    colour=0x00FFFF,
                    description=f"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {keywords}",
                )
                while i != 6:
                    req = snippet["items"][i]
                    video_title = req["snippet"]["title"]
                    video_id = req["id"]["videoId"]
                    clip_url = "http://www.youtube.com/watch?v=" + video_id
                    embed.add_field(
                        name=f"{i}. {video_title}", value=f"{clip_url}", inline=False
                    )
                    i = i + 1

                embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                message = await ctx.send(embed=embed)
                await message.add_reaction("‚úÖ")

            if server_language == "English":
                embed = nextcord.Embed(
                    title="Video from YouTube",
                    colour=0x00FFFF,
                    description=f"search: {keywords}",
                )
                while i != 6:
                    req = snippet["items"][i]
                    video_title = req["snippet"]["title"]
                    video_id = req["id"]["videoId"]
                    clip_url = "http://www.youtube.com/watch?v=" + video_id
                    embed.add_field(
                        name=f"{i}. {video_title}", value=f"{clip_url}", inline=False
                    )
                    i = i + 1

                embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                message = await ctx.send(embed=embed)
                await message.add_reaction("‚úÖ")

    @ytsearch.error
    async def ytsearch_error(self, ctx: commands.Context, error):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ``{settings.COMMAND_PREFIX}ytsearch [keywords]``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` need to specify what video to search ``{settings.COMMAND_PREFIX}ytsearch [keywords]``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

    @commands.command()
    async def country(self, ctx: commands.Context, *, country):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://restcountries.eu/rest/v2/name/{country}?fullText=true"
                ) as r:
                    r = await r.json()

            name = r[0]["name"]
            population = r[0]["population"]
            area = r[0]["area"]
            capital = r[0]["capital"]
            subregion = r[0]["subregion"]
            nativename = r[0]["nativeName"]
            timezone = r[0]["timezones"][0]
            currency = r[0]["currencies"][0]["name"]
            symbol = r[0]["currencies"][0]["symbol"]
            language = r[0]["languages"][0]["name"]
            code = r[0]["alpha2Code"]
            codephone = r[0]["callingCodes"][0]

            population = humanize.intcomma(population)
            area = humanize.intcomma(area)

            codelower = code.lower()

            flag = f"https://flagcdn.com/256x192/{codelower}.png"

            if server_language == "Thai":
                embed = nextcord.Embed(
                    colour=0x00FFFF,
                    title=f"{name}",
                    description=f"""```

‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á : {nativename}
‡πÇ‡∏Ñ‡πâ‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® : {code}
‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏ó‡∏£ : {codephone}
‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ : {subregion}
‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£ : {population} ‡∏Ñ‡∏ô
‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á : {capital}
‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà : {area} km¬≤
‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ : {timezone}
‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô : {currency} ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå : ({symbol})
‡∏†‡∏≤‡∏©‡∏≤ : {language}```""",
                )

                embed.set_thumbnail(url=flag)
                embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                message = await ctx.send(embed=embed)

                await message.add_reaction("üòä")

            if server_language == "English":
                embed = nextcord.Embed(
                    colour=0x00FFFF,
                    title=f"{name}",
                    description=f"""```

Native name : {nativename}
country code : {code}
calling code : {codephone}
subregion : {subregion}
population : {population} peoples
capital city : {capital}
area : {area} km¬≤
timezone : {timezone}
currency : {currency} symbol : ({symbol})
language : {language}```""",
                )

                embed.set_thumbnail(url=flag)
                embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                message = await ctx.send(embed=embed)

                await message.add_reaction("üòä")

    @country.error
    async def country_error(self, ctx: commands.Context, error):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π ``{settings.COMMAND_PREFIX}country (country)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` need to specify a country to search ``{settings.COMMAND_PREFIX}country (country)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

    @commands.command()
    async def pingweb(self, ctx: commands.Context, website=None):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                if website is None:
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π ``{settings.COMMAND_PREFIX}pingweb (website)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

                else:
                    try:
                        r = requests.get(website).status_code
                        if r == 404:
                            embed = nextcord.Embed(
                                colour=0x983925,
                                title=f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå {website}",
                                description=f" ‚ö†Ô∏è`` ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå```",
                            )
                            embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                            message = await ctx.send(embed=embed)
                            await message.add_reaction("‚ö†Ô∏è")

                        else:
                            embed = nextcord.Embed(
                                colour=0x75FF9F,
                                title=f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå {website}",
                                description=f"```‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏õ‡∏Å‡∏ï‡∏¥```",
                            )
                            embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                            message = await ctx.send(embed=embed)

                    except requests.exceptions.MissingSchema:
                        embed = nextcord.Embed(
                            colour=0x983925,
                            description=f" ‚ö†Ô∏è``{ctx.author}`` ‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ``{settings.COMMAND_PREFIX}pingweb (website)``",
                        )
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚ö†Ô∏è")

                    except requests.exceptions.ConnectionError:
                        embed = nextcord.Embed(
                            colour=0x983925,
                            description=f" ‚ö†Ô∏è``{ctx.author}`` ‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ``{settings.COMMAND_PREFIX}pingweb (website)``",
                        )
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                if website is None:
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` need to specify a website to search ``{settings.COMMAND_PREFIX}pingweb (website)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

                else:
                    try:
                        r = requests.get(website).status_code
                        if r == 404:
                            embed = nextcord.Embed(
                                colour=0x983925,
                                title=f"Status of {website}",
                                description=f" ‚ö†Ô∏è`` Website is offline```",
                            )
                            embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                            message = await ctx.send(embed=embed)
                            await message.add_reaction("‚ö†Ô∏è")

                        else:
                            embed = nextcord.Embed(
                                colour=0x75FF9F,
                                title=f"Status of {website}",
                                description=f"``` Website is online```",
                            )
                            embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                            message = await ctx.send(embed=embed)

                    except requests.exceptions.MissingSchema:
                        embed = nextcord.Embed(
                            colour=0x983925,
                            description=f" ‚ö†Ô∏è``{ctx.author}`` Unable to find the website ``{settings.COMMAND_PREFIX}pingweb (website)``",
                        )
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚ö†Ô∏è")

                    except requests.exceptions.ConnectionError:
                        embed = nextcord.Embed(
                            colour=0x983925,
                            description=f" ‚ö†Ô∏è``{ctx.author}`` Unable to find the website ``{settings.COMMAND_PREFIX}pingweb (website)``",
                        )
                        embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚ö†Ô∏è")

    @commands.command()
    async def weather(self, ctx: commands.Context, *, city):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={settings.openweathermapAPI}"
                    ) as r:
                        r = await r.json()
                        if not r["cod"] == "404":
                            temperature = float(r["main"]["temp"]) - 273.15
                            feellike = float(r["main"]["feels_like"]) - 273.15
                            highesttemp = float(r["main"]["temp_max"]) - 273.15
                            lowesttemp = float(r["main"]["temp_min"]) - 273.15
                            humidity = float(r["main"]["humidity"])
                            windspeed = float(r["wind"]["speed"])

                            day = r["weather"][0]["description"]

                            embed = nextcord.Embed(
                                colour=0x00FFFF,
                                title=f"‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {city}",
                                description=f"""```
‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ : {round(temperature,1)}¬∞C
‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô : {round(highesttemp,1)}¬∞C
‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πç‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô : {round(lowesttemp,1)}¬∞C
‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô : {round(feellike,1)}¬∞C
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô : {round(humidity)}%
‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏° : {round(windspeed,2)}mph
‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® : {day}```
                            """,
                            )
                            embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                            await ctx.send(embed=embed)

                        else:
                            embed = nextcord.Embed(
                                colour=0x983925,
                                description=f" ‚ö†Ô∏è``{ctx.author}`` ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏™‡∏∞‡∏Å‡∏î ``{settings.COMMAND_PREFIX}weather (city)``",
                            )
                            embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                            message = await ctx.send(embed=embed)
                            await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={settings.openweathermapAPI}"
                    ) as r:
                        r = await r.json()
                        if not r["cod"] == "404":
                            temperature = float(r["main"]["temp"]) - 273.15
                            feellike = float(r["main"]["feels_like"]) - 273.15
                            highesttemp = float(r["main"]["temp_max"]) - 273.15
                            lowesttemp = float(r["main"]["temp_min"]) - 273.15
                            humidity = float(r["main"]["humidity"])
                            windspeed = float(r["wind"]["speed"])

                            day = r["weather"][0]["description"]

                            embed = nextcord.Embed(
                                colour=0x00FFFF,
                                title=f"weather in {city}",
                                description=f"""```
Temperature now : {round(temperature,1)}¬∞C
Highest temperature today : {round(highesttemp,1)}¬∞C
Lowest temperature today : {round(lowesttemp,1)}¬∞C
Feel like : {round(feellike,1)}¬∞C
Humidity : {round(humidity)}%
windspeed : {round(windspeed,2)}mph
Weather : {day}```
                    """,
                            )
                            embed.set_footer(text=f"‚îóRequested by {ctx.author}")
                            await ctx.send(embed=embed)

                        else:
                            embed = nextcord.Embed(
                                colour=0x983925,
                                description=f" ‚ö†Ô∏è``{ctx.author}`` Cannot find this city ``{settings.COMMAND_PREFIX}weather (city)``",
                            )
                            embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                            message = await ctx.send(embed=embed)
                            await message.add_reaction("‚ö†Ô∏è")

    @weather.error
    async def weather_error(self, ctx: commands.Context, error):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π ``{settings.COMMAND_PREFIX}weather (city)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

            if server_language == "English":
                if isinstance(error, commands.MissingRequiredArgument):
                    embed = nextcord.Embed(
                        colour=0x983925,
                        description=f" ‚ö†Ô∏è``{ctx.author}`` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π ``{settings.COMMAND_PREFIX}weather (city)``",
                    )
                    embed.set_footer(text=f"‚îóRequested by {ctx.author}")

                    message = await ctx.send(embed=embed)
                    await message.add_reaction("‚ö†Ô∏è")

    @commands.command()
    async def checklink(self, ctx: commands.Context, website):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]

            if server_language == "Thai":
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"https://sitecheck.sucuri.net/api/v3/?scan={website}"
                    ) as r:
                        response = await r.json()
                        certissuer = response["tls"]["cert_issuer"]
                        certexpire = response["tls"]["cert_expires"]
                        certauthority = response["tls"]["cert_authority"]
                        embed = nextcord.Embed(
                            title="‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏á‡∏Ñ‡πå",
                            description=f"**Certification**\n``Certification Issuer:`` {certissuer}\n``certification expire:`` {certexpire}\n``certificaiton authority:`` {certauthority}",
                        )

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚úîÔ∏è")

            if server_language == "English":
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"https://sitecheck.sucuri.net/api/v3/?scan={website}"
                    ) as r:
                        response = await r.json()
                        certissuer = response["tls"]["cert_issuer"]
                        certexpire = response["tls"]["cert_expires"]
                        certauthority = response["tls"]["cert_authority"]
                        embed = nextcord.Embed(
                            title="‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏á‡∏Ñ‡πå",
                            description=f"**Certification**\n``Certification Issuer:`` {certissuer}\n``certification expire:`` {certexpire}\n``certificaiton authority:`` {certauthority}",
                        )

                        message = await ctx.send(embed=embed)
                        await message.add_reaction("‚úîÔ∏è")

    @commands.command()
    async def gold(self, ctx: commands.Context):
        languageserver = await settings.collectionlanguage.find_one(
            {"guild_id": ctx.guild.id}
        )
        if languageserver is None:
            message = await ctx.send(embed=languageEmbed.languageembed(self, ctx))
            await message.add_reaction("üëç")

        else:
            server_language = languageserver["Language"]
            if server_language == "Thai":
                url = "https://xn--42cah7d0cxcvbbb9x.com/"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as response:
                        soupObject = BeautifulSoup(await response.text(), "html.parser")
                        table = soupObject.find_all("td", class_="em bg-em g-n")
                        date = soupObject.find("td", class_="span bg-span txtd al-r")
                        time = soupObject.find("td", class_="em bg-span txtd al-r")

                        gold_bar_buy = table[0]
                        gold_bar_sell = table[1]
                        gold_jewelry_buy = table[2]
                        gold_jewelry_sell = table[3]

                        date = date.contents[0]
                        time = time.contents[0]
                        gold_bar_buy = gold_bar_buy.contents[0]
                        gold_bar_sell = gold_bar_sell.contents[0]
                        gold_jewelry_buy = gold_jewelry_buy.contents[0]
                        gold_jewelry_sell = gold_jewelry_sell.contents[0]
                        date_and_time = f"{date} {time}"

                embed = nextcord.Embed(
                    title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á",
                    colour=0xFED000,
                    description=f"""
**‡∏ó‡∏≠‡∏á‡πÄ‡πÄ‡∏ó‡πà‡∏á‡∏Ñ‡πç‡∏≤‡πÄ‡πÄ‡∏ó‡πà‡∏á**                   
```xl
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {gold_bar_sell} ‡∏ø
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ {gold_bar_buy} ‡∏ø
```
**‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì**
```xl
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {gold_jewelry_sell} ‡∏ø
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ {gold_jewelry_buy} ‡∏ø
```
‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {date_and_time}
          
                    """,
                )
                await ctx.send(embed=embed)

            else:
                pass


def setup(bot: commands.Bot):
    bot.add_cog(Info(bot))
